- name: Read consul vault ACL
  include_tasks: roles/cluster/consul/server/tasks/set-acl-policy-fact.yml
  vars:
    policy_name: vault-service-policy

- name: Ensure vault dir is present
  file:
    path: "{{ item }}"
    state: directory
    owner: vault
    group: vault
    mode: 0755
  with_items:
    - "{{ vault.remote.server.root_dir }}/data"
    - "{{ vault.remote.server.tokens_dir }}"
    - "{{ vault.remote.server.policies_dir }}"

- name: Copy server config
  register: vault_server_config
  template:
    src: server.hcl
    dest: "{{ vault.remote.server.root_dir }}/config.hcl"
    owner: vault
    group: vault
    mode: 0600

- name: Copy vault server TLS keys
  register: vault_server_tls_keys
  copy:
    src: "{{ item }}"
    dest: "{{ vault.remote.tls_dir }}/"
    owner: vault
    group: vault
    mode: 0600
  with_fileglob:
    - "{{ vault.local.server.tls.keys_dir }}/*"

- name: Copy vault CA key
  register: vault_server_ca_key
  copy:
    src: "{{ vault.local.server.tls.ca_dir }}/vault-ca.pem"
    dest: "{{ vault.remote.tls_dir }}/"
    owner: consul
    group: consul
    mode: 0600

- name: Copy vault server env
  register: vault_server_env
  template:
    src: server.env
    dest: "{{ vault.remote.server.root_dir }}/server.env"
    owner: vault
    group: vault
    mode: 0600

- name: Copy vault server script
  register: vault_server_script
  template:
    src: server-config.sh
    dest: "{{ vault.remote.server.root_dir }}/server-config.sh"
    owner: vault
    group: vault
    mode: 0700

- name: Copy vault-server systemd service
  register: vault_server_service
  template:
    src: vault-server.service
    dest: /etc/systemd/system/vault-server.service
    owner: root
    group: root
    mode: 0755

- name: Start vault-server systemd service
  when: >
    vault_server_config.changed or
    vault_server_tls_keys.changed or
    vault_server_ca_key.changed or
    vault_server_script.changed or
    vault_server_service.changed or
    vault_server_env.changed
  systemd:
    name: vault-server
    state: restarted
    enabled: true
    daemon_reload: yes

- name: Check if root keys exists
  stat:
    path: "{{ vault.remote.server.tokens_dir }}/root-keys.json"
  register: vault_root_keys_initialized

- name: Test connection to vault
  wait_for:
    host: localhost
    port: 8200
    delay: 5
    connect_timeout: 15
    timeout: 30

- name: Initialize operator
  retries: 15
  delay: 1
  register: result
  until: result.rc == 0
  become_user: vault
  shell: |
    status=$(vault status -tls-skip-verify -format=json | jq -r '.initialized')

    if [ "$status" = "false" ]; then
      vault operator init -key-shares=3 -key-threshold=2 --format=json -tls-skip-verify > {{ vault.remote.server.tokens_dir }}/root-keys.json
      chmod 0600 {{ vault.remote.server.tokens_dir }}/root-keys.json
    fi

- include_tasks: vault-unseal.yml

- name: Ensure KV2 store enabled
  shell:
    key_present=$(VAULT_TOKEN={{ vault_root_token }} vault secrets list -tls-skip-verify -format=json | jq -r 'has("kv-v2/")')

    if [ "$key_present" = "false" ]; then
      VAULT_TOKEN={{ vault_root_token }} vault secrets enable -tls-skip-verify kv-v2 ;
    fi

- include_tasks: restore-snapshot.yml

- name: Sync policy
  include_tasks: sync-policy.yml
  vars:
    file_path: "{{ item }}"
  with_fileglob:
    - "{{ vault.local.server.policies_dir }}/*.hcl"
